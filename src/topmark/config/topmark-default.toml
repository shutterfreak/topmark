# topmark:header:start
#
#   project      : TopMark
#   file         : topmark-default.toml
#   file_relpath : src/topmark/config/topmark-default.toml
#   license      : MIT
#   copyright    : (c) 2025 Olivier Biot
#
# topmark:header:end

#########################
# TopMark configuration #
#########################
# This file is used to define the default configuration for TopMark.

# ------------------------------
# Config discovery & precedence
# ------------------------------
# TopMark discovers configuration from (lowest → highest precedence):
#   1. Built-in defaults (this file bundled with TopMark)
#   2. User config (~/.config/topmark/topmark.toml or ~/.topmark.toml)
#   3. Project configs discovered upward from the *discovery anchor* to the root
#      * The discovery anchor is the first input path (its parent if it's a file);
#        if no inputs are provided, the anchor is the current working directory.
#      * In each directory, TopMark considers both:
#          - pyproject.toml  (table: [tool.topmark])
#          - topmark.toml    (tool-specific file)
#        Same-directory precedence: pyproject.toml is merged first,
#        then topmark.toml overrides it.
#      * Directories are merged root → current (nearest wins).
#      * Set `root = true` in a discovered config to stop further upward traversal.
#   4. Extra config files passed explicitly via --config (merged in the order provided)
#   5. CLI overrides (highest precedence)
#
# Path resolution rules:
#   * Globs declared in config files are resolved relative to the directory that contains
#     that config file. Globs declared via CLI are resolved relative to the current working
#     directory (invocation site).
#   * Path-to-file settings (e.g., include_from/exclude_from/files_from) are resolved relative
#     to the declaring source (config file directory, or CWD for CLI options). The referenced
#     files’ own patterns are evaluated relative to each file’s own directory.
#   * `relative_to` affects only header metadata (e.g., `file_relpath`), not discovery.
#
# To mark a directory boundary for discovery, set:
#   root = true
# in `topmark.toml`, or within `[tool.topmark]` in `pyproject.toml`.
# The default is `root = false` (continue traversing parents).
#
# Special flags:
#   * --no-config disables user+project discovery (only defaults → --config → CLI).
#
# Example (uncomment to stop discovery above this directory):
# root = true


# ==========================
# Header field configuration
# ==========================

[header]
# Configuration for header fields and metadata to include in generated headers

# List of fields to include in the header.
# Available fields include 'file', 'file_relpath', 'author', 'date', 'license', etc.
# You can define your own fields as well.

# TODO: review the fields: builtin field types and custom fields

fields = ["file", "file_relpath"]


# ========================
# TopMark field definition
# ========================

[fields]

# Project name to include in the header
# project = "TopMark"

# License to include in the header. Example values: 'MIT', 'GPL-3.0', 'Apache-2.0'
# license = "MIT"

# Copyright statement to include in the header.
# copyright = "(c) 2025 Your Name" # Update according to your needs


# ========================
# Formatting configuration
# ========================

[formatting]
# Formatting options for header rendering.

# Align the fields (colons) in the header for better readability. Values: true or false.
align_fields = true

# File header format (default, native, plain, json)
# header_format = "native"


# ======================
# Policy configuration
# ======================

[policy]
# Global policy that governs whether TopMark may add or update headers.
#
# add_only:
#   * true  → Only insert missing headers; do not update existing headers.
#   * false → Allow both insert and update (subject to other policy flags).
add_only = false
#
# update_only:
#   * true  → Only update existing headers; do not insert missing headers.
#   * false → Allow both update and insert (subject to other policy flags).
update_only = false
#
# allow_header_in_empty_files:
#   Permit inserting a header into an otherwise empty file (e.g., `__init__.py`).
#   This is disabled by default to avoid surprising diffs in empty placeholders.
allow_header_in_empty_files = false

# Per‑file‑type policy overrides.
# Define sub‑tables under `[policy_by_type.<file_type_id>]` to fine‑tune behavior.
#
# Example (uncomment to allow headers in empty Python files only):
#
# [policy_by_type.python]
# allow_header_in_empty_files = true


# ===================
# Files configuration
# ===================

[files]

# Specify (filter) file types:
# file_types = "markdown"


# ============================
# END of TopMark Configuration
# ============================
